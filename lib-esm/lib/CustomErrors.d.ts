import { CustomError } from "ts-custom-error";
import { Ast } from "./Ast";
export declare class ParsingError extends CustomError {
    expression: string;
    index: number;
    reason: "Expected )" | "Expected expression in ()" | "Expression Remaining" | "Generic" | "Expected expression after elvis (?:)" | "Expected ) for function call" | "Expected ) for method call" | "No right operand for &&" | "No right operand for AND" | "No right operand for ||" | "No right operand for OR" | "No right operand for >=" | "No right operand for >" | "No right operand for <=" | "No right operand for <" | "No right operand for !=" | "No right operand for ==" | "No right operand for *" | "No right operand for /" | "No right operand for %" | "No right operand for -" | "No right operand for +" | "No right operand for 'matches'" | "No right operand for 'between'" | "No left operand for &&" | "No left operand for ||" | "No left operand for >=" | "No left operand for >" | "No left operand for <=" | "No left operand for <" | "No left operand for !=" | "No left operand for ==" | "No left operand for *" | "No left operand for /" | "No left operand for %" | "Assignment not allowed" | "Expected property after ." | "Expected property after ?." | "Expression expected in []" | "Incomplete Ternary" | "Not an Operator" | "Missing Character &" | "Missing Character |" | "Non-terminating quoted string" | "Expected }" | "Expected ]" | "Expected ] for selection expression ?[" | "Expected ] for selection expression ^[" | "Expected ] for selection expression $[" | "Expected ] for Projection expression ![";
    constructor(expression: string, index: number, reason: "Expected )" | "Expected expression in ()" | "Expression Remaining" | "Generic" | "Expected expression after elvis (?:)" | "Expected ) for function call" | "Expected ) for method call" | "No right operand for &&" | "No right operand for AND" | "No right operand for ||" | "No right operand for OR" | "No right operand for >=" | "No right operand for >" | "No right operand for <=" | "No right operand for <" | "No right operand for !=" | "No right operand for ==" | "No right operand for *" | "No right operand for /" | "No right operand for %" | "No right operand for -" | "No right operand for +" | "No right operand for 'matches'" | "No right operand for 'between'" | "No left operand for &&" | "No left operand for ||" | "No left operand for >=" | "No left operand for >" | "No left operand for <=" | "No left operand for <" | "No left operand for !=" | "No left operand for ==" | "No left operand for *" | "No left operand for /" | "No left operand for %" | "Assignment not allowed" | "Expected property after ." | "Expected property after ?." | "Expression expected in []" | "Incomplete Ternary" | "Not an Operator" | "Missing Character &" | "Missing Character |" | "Non-terminating quoted string" | "Expected }" | "Expected ]" | "Expected ] for selection expression ?[" | "Expected ] for selection expression ^[" | "Expected ] for selection expression $[" | "Expected ] for Projection expression ![", message?: string, cause?: Error);
}
export declare class RuntimeError extends CustomError {
    ast: Ast;
    constructor(ast: Ast, message?: string, cause?: Error);
}
export declare class UnexpectedError extends CustomError {
    constructor(message?: string, cause?: Error);
}
export type TsSpelError = ParsingError | RuntimeError | UnexpectedError;
